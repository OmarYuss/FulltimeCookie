// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders    Order[]
}

model Product {
  id          String   @id @default(uuid())
  name        String
  description String
  price       Float
  images      String[] // Array of image URLs
  dataAiHint  String
  category    String   // Cookies, Cupcakes, Cakes, Goods
  tags        String[] // Array of tags
  details     Json     // Contains, prepTime, pricePer as JSON
  hasRecipe   Boolean  @default(false)
  recipeId    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  recipe      Recipe?
  orderItems  OrderItem[]
  variations  ProductVariation[]
  packageTypes ProductPackageType[]
}

model ProductVariation {
  id             String  @id @default(uuid())
  productId      String
  name           String
  priceModifier  Float
  inStock        Boolean @default(true)
  
  // Relations
  product        Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model ProductPackageType {
  id        String  @id @default(uuid())
  productId String
  name      String
  price     Float
  
  // Relations
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Recipe {
  id          String   @id @default(uuid())
  productId   String   @unique
  name        String
  description String
  ingredients Json     // Array of {name, quantity} objects
  instructions String[] // Array of instruction strings
  isPaid      Boolean  @default(false)
  price       Float    @default(0)
  rating      Float    @default(0)
  reviews     Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Order {
  id           String      @id @default(uuid())
  userId       String
  date         DateTime    @default(now())
  status       String      // Pending, Accepted, inCreation, inWait, inDelivery, isDone, inOffer, aOffer, rOffer, Cancelled
  itemsSummary String
  total        Float
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  
  // Relations
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderItems   OrderItem[]
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  
  // Relations
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
} 